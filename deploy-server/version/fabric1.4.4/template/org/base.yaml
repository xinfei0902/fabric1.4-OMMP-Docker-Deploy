
version: '2'

#分布式部署顺序，ca可单独部署，couchdb随peer启动，不需要单独启动
# zookeeper->kafka->orderer->peer
# ca
services:
  $[caName]:
    container_name: $[caName]
    image: hyperledger/fabric-ca:latest
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=$[caName]
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca/$[caCertPem]
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca/$[caSK]
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/$[tlsCertPem]
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/tlsca/$[tlsSk]
    ports:
      - "$[caPort]:7054"
    command: sh -c 'fabric-ca-server start -b admin:anhui-admin -d'
    volumes:
      - ./$[caCertPath]:/etc/hyperledger/fabric-ca-server-config/ca
      - ./$[tlsCaPath]:/etc/hyperledger/fabric-ca-server-config/tlsca
      - /blockchainData/$[caName]:/etc/hyperledger/fabric-ca-server
 
  $[couchdbName]:
    container_name: $[couchdbName]
    image: hyperledger/fabric-couchdb:latest
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    ports:
      - "$[couchdbPort]:5984"
    volumes:
      - /blockchainData/$[couchdbName]:/opt/couchdb/data
  $[peerName]:
    container_name: $[peerName]
    image: hyperledger/fabric-peer:latest
    environment:
      - CORE_PEER_ID=$[peerDomain]
        #用于peer自身时，是组织中其他peer节点联系的端口，用于cli时，这个是cli要去连接的peer的地址，因此要使用容器端口映射的主机端口
      - CORE_PEER_ADDRESS=$[peerDomain]:$[peerPort]
        #自己监听的地址，要容器自身的端口
      - CORE_PEER_LISTENADDRESS=0.0.0.0:$[peerPort]
        #如果不设置这个变量，将默认使用CORE_PEER_ADDRESS的值+7052端口
        #CORE_PEER_CHAINCODEADDRESS和CORE_PEER_CHAINCODELISTENADDRESS使用的端口必须一致
      - CORE_PEER_CHAINCODEADDRESS=$[peerDomain]:$[peerChaincodePort]
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:$[peerChaincodePort]
        #bootstrap用于peer启动时，向组织内部除自己外的谁介绍自己，同时向该节点索要其已经拥有的组织成员关系
        #该值是一个列表，值用空格隔开
      - CORE_PEER_GOSSIP_BOOTSTRAP=$[peerDomain]:$[peerPort]
        #向其他组织介绍自己（在大型网络中如此设置更有效率和有用）
        #如果不设置，则该节点将不被其他组织中的节点知道
        #自己负责介绍自己
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=$[peerDomain]:$[peerPort]
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=$[orgNameMSP]
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
        #使用couchdb映射的主机端口，所使用的地址如果是域名，在下面的extra_hosts要进行映射
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=$[couchdbName]:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
      - GODEBUG=netdns=go
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        #根据docker-compose启动时设置的COMPOSE_PROJECT_NAME变量值改变而改变，$(COMPOSE_PROJECT_NAME)_default
        #如果不设置，则是base.yaml所在目录名+_defalut
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=anhui_default
        #节点的设置为INFO，cli端设置为DEBUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_CHAINCODE_LOGGING_SHIM=DEBUG
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - ./$[peerMspPath]:/etc/hyperledger/fabric/msp
      - ./$[peerTlsPath]:/etc/hyperledger/fabric/tls
      - /blockchainData/$[peerName]:/var/hyperledger/production
    ports:
      - $[peerPort]:$[peerPort]
    depends_on:
      - $[couchdbName]
  
  $[cliName]:
    container_name: $[cliName]
    image: hyperledger/fabric-tools:latest
    tty: true
    stdin_open: true
    environment:
        #与创建genesis.block时所给的-channelID的值一致
      - SYS_CHANNEL=system_channel
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=$[peerDomain]:$[peerPort]
      - CORE_PEER_LOCALMSPID=$[orgNameMSP]
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/$[peerTlsServerCrtPath]
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/$[peerTlsServerKeyPath]
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/$[peerCliTlsPath]
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/$[peerCliMspPath]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
        #在cli容器的GOPATH目录下
      - ./chaincode/:/opt/gopath/src/github.com/chaincode
      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
